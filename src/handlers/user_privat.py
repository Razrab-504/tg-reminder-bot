from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command, CommandStart
from aiogram.types import ReplyKeyboardRemove
from datetime import datetime
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
import asyncio


from src.keyboards.inline import remind_inline_kbd, check_remainders, delete_remainders
from src.keyboards.inline import start_kbd

from src.BD.bd_for_users import init_db, create_db, get_user_reminders, delete_reminder, get_all_reminders

class Writing(StatesGroup):
    writing = State()

user_private_router = Router()

@user_private_router.message(CommandStart())
async def start_cmd(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –æ–¥–Ω—É –∏–∑ —Å–ª–µ–¥—É—é—â–∏—Ö –∫–Ω–æ–ø–æ–∫", reply_markup=start_kbd)


# –†–µ–∞–∫—Ü–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É remind
@user_private_router.callback_query(F.data == "write_reminder")
async def remind_callback(callback: CallbackQuery):
    await callback.answer()
    await callback.message.answer(
        "üìù –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–æ–∑–¥–∞–¥–∏–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ.\n\n"
        "–ù–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<b>–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ | –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è | –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</b>\n"
        "üìå –ü—Ä–∏–º–µ—Ä: <i>–ó–≤–æ–Ω–æ–∫ | –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ | 2025-05-24 18:30</i>",
        parse_mode="HTML",
        reply_markup=remind_inline_kbd,
    )


# –ó–∞–ø–∏—Å—ã–≤–∞—à–µ—à—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É
@user_private_router.callback_query(F.data == "write")
async def writing_cmd(callback: CallbackQuery, state: FSMContext):
    await callback.message.delete()
    await callback.message.answer(
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<–Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞> | <—Ç–µ–∫—Å—Ç> | <–ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú>\n\n"
        "–ü—Ä–∏–º–µ—Ä: –ó–≤–æ–Ω–æ–∫ | –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ | 2025-05-24 18:30"
    )
    await state.set_state(Writing.writing)
    await callback.answer()
    

# –°–æ—Ö—Ä–∞–Ω—è–µ—à—å –Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫—É –≤ –ë–î
@user_private_router.message(Writing.writing)
async def procesing_cmd(message: Message, state: FSMContext):
    text = message.text

    parts = list(map(str.strip, text.split("|")))

    if len(parts) != 3:
        await message.answer(
            "‚ùó –§–æ—Ä–º–∞—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ò—Å–ø–æ–ª—å–∑—É–π:\n"
            "–Ω–∞–∑–≤–∞–Ω–∏–µ | —Ç–µ–∫—Å—Ç | –¥–∞—Ç–∞ –∏ –≤—Ä–µ–º—è\n\n"
            "–ü—Ä–∏–º–µ—Ä: –ó–≤–æ–Ω–æ–∫ | –ü–æ–∑–≤–æ–Ω–∏—Ç—å –º–∞–º–µ | 2025-05-24 18:30"
        )
        return

    title, content, reminder_datetime = parts

    try:
        dt = datetime.strptime(reminder_datetime, "%Y-%m-%d %H:%M")
    except ValueError:
        await message.answer("‚ùó –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π: –ì–ì–ì–ì-–ú–ú-–î–î –ß–ß:–ú–ú\n–ü—Ä–∏–º–µ—Ä: 2025-05-24 18:30")
        return

    init_db()
    create_db(
        user_id=message.from_user.id,
        name=title,
        text=content,
        remind_at=dt.strftime("%Y-%m-%d %H:%M")
    )


    await message.answer(
        f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!\n\n"
        f"üìå <b>{title}</b>\nüìù {content}\nüïí {dt.strftime('%Y-%m-%d %H:%M')}",
        parse_mode="HTML"
    )
    await state.clear()

# –¥–æ—Å—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–∏
@user_private_router.callback_query(F.data == "check_reminder")
async def show_reminder_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    reminders = get_user_reminders(user_id)
    
    kbd = check_remainders(reminders)
    
    await callback.message.answer("–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:", reply_markup=kbd)
    await callback.answer()


# –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç –≤ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
@user_private_router.callback_query(F.data.startswith('reminder_'))
async def reminder_callback(callback: CallbackQuery):
    reminder_id = callback.data.split("_")[1]
    reminders = get_user_reminders(callback.from_user.id)

    reminder = next((r for r in reminders if str(r[0]) == reminder_id), None)
    if reminder is None:
        await callback.message.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return

    id_, name, some_id, text, remind_at = reminder

    await callback.message.answer(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {name}\n–¢–µ–∫—Å—Ç: {text}\n–í—Ä–µ–º—è: {remind_at}")


# –¥–æ—Å—Ç–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞–∫—É—é —É–¥–∞–ª–∏—Ç—å
@user_private_router.callback_query(F.data == "delete_reminder")
async def show_reminder_callback(callback: CallbackQuery):
    user_id = callback.from_user.id
    reminders = get_user_reminders(user_id)
    
    kbd = delete_remainders(reminders)
    
    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å:", reply_markup=kbd)
    await callback.answer()
    

@user_private_router.callback_query(F.data.startswith('delete_reminder'))
async def delete_cmd(callback: CallbackQuery):
    reminder_id = callback.data.split("_")[2]
    delete_reminder(reminder_id=reminder_id)
    
    await callback.message.answer("–≠—Ç–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞")
    await callback.answer()
    
