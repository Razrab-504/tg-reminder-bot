import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from datetime import datetime
from aiogram import Bot
from src.BD.bd_for_users import get_all_reminders

scheduler = AsyncIOScheduler()

async def send_reminder(bot: Bot, user_id: int, name: str, text: str):
    try:
        await bot.send_message(user_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: <b>{name}</b>\n\n{text}", parse_mode="HTML")
        print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ {user_id}: {e}")

def schedule_all_reminders(bot: Bot, scheduler: AsyncIOScheduler):
    reminders = get_all_reminders()
    print(f"–ù–∞–π–¥–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {len(reminders)}")
    
    for reminder in reminders:
        reminder_id, name, user_id, text, remind_at = reminder
        
        try:
            remind_time = datetime.strptime(remind_at, "%Y-%m-%d %H:%M")
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –≤ –¥–∞—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è id={reminder_id}: {e}")
            continue
        
        # –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–∂–µ –ø—Ä–æ—à–ª–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
        if remind_time <= datetime.now():
            print(f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ id={reminder_id} —É–∂–µ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            continue
        
        print(f"–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ id={reminder_id} –Ω–∞ {remind_time}")

        scheduler.add_job(
            send_reminder,
            trigger="date",
            run_date=remind_time,
            args=[bot, user_id, name, text],
            id=f"reminder_{reminder_id}",
            misfire_grace_time=60 * 60 
        )

